/**
 第三步：确定 UI state 的最小（且完整）表示

 想要使你的 UI 具备交互功能，需要有触发基础数据模型改变的能力。React 通过实现 state 来完成这个任务。

 为了正确地构建应用，你首先需要找出应用所需的 state 的最小表示，并根据需要计算出其他所有数据。其中的关键正是 DRY: Don’t Repeat Yourself。
 只保留应用所需的可变 state 的最小集合，其他数据均由它们计算产生。比如，你要编写一个任务清单应用，你只需要保存一个包含所有事项的数组，而无需
 额外保存一个单独的 state 变量（用于存储任务个数）。当你需要展示任务个数时，只需要利用该数组的 length 属性即可。

 我们的示例应用拥有如下数据：
     包含所有产品的原始列表
     用户输入的搜索词
     复选框是否选中的值
     经过搜索筛选的产品列表

 通过问自己以下三个问题，你可以逐个检查相应数据是否属于 state：
     1.该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。
     2.该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。
     3.你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。

     包含所有产品的原始列表是经由 props 传入的，所以它不是 state；搜索词和复选框的值应该是 state，因为它们
 随时间会发生改变且无法由其他数据计算而来；经过搜索筛选的产品列表不是 state，因为它的结果可以由产品的原始列表
 根据搜索词和复选框的选择计算出来。


 综上所述，属于 state 的有：
     用户输入的搜索词
     复选框是否选中的值


 */
